/* BeginDocumentation
Name: hh_moto_booth_nestml - a motor neuron model in HH formalism.

Description:

 hh_moto_booth is an implementation of a spiking motor neuron using the Hodkin-Huxley
 formalism according to the article by Booth V. Please see references.

 Post-synaptic currents and Spike Detection are the same as in hh_psc_alpha

References:

 Muscle spindle feedback circuit
 https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=189786

 Compartmental model of vertebrate motoneurons for Ca2+-dependent spiking and plateau potentials under pharmacological treatment.
 Booth V1, Rinzel J, Kiehn O.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent

Authors: Aleksei Sanin
SeeAlso: hh_psc_alpha

*/
neuron hh_moto_booth:
  state:
    V_m mV = -65. mV # Membrane potential

    function alpha_m_init real = (0.4 * (V_m + 66)) / (1 - exp(-(V_m + 66)/5))
    function beta_m_init real = (0.4 * (-(V_m + 32))) / (1 - exp((V_m + 32)/5))
    Act_m real =  alpha_m_init / ( alpha_m_init + beta_m_init )

    function h_inf_init real = 1 / (1 + exp((V_m + 65)/7))
    # function h_tau_init real = 30 / (exp((V_m + 60)/15) + exp(-(V_m + 60)/16))
    Act_h real = h_inf_init

    function n_inf_init real = 1 / (1 + exp(-(V_m + 38)/15))
    # function n_tau_init real = 5 / (exp((V_m + 50)/40) + exp(-(V_m + 50)/50))

    # Act_m real = sodium_m_inf(V_m)      # Sodium activation variable 'm'
    # Act_h real = sodium_h_inf(V_m)      # Sodium activation variable 'h'
    Inact_n real = potassium_n_inf(V_m) # Potassium inactivation variable 'n'
    Act_p real = calcium_p_inf(V_m)     # Calcium activation variable 'p'
    Act_mc real = calcium_mc_inf(V_m)   # Calcium activation variable 'mc'
    Act_hc real = calcium_hc_inf(V_m)   # Calcium activation variable 'hc'
	e_Ca real = ((1000 * R_const * T_current)/(2 * F_const))*log(Ca_out/Ca_in)


    r integer # number of steps in the current refractory phase
  end

  equations:
    # synapses: alpha functions
    shape I_syn_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
    shape I_syn_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
    function I_syn_exc pA = curr_sum(I_syn_ex, spikeExc)
    function I_syn_inh pA = curr_sum(I_syn_in, spikeInh)

    # TODO check that `log` is the same as in Neuron
    function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - e_Na )
    function I_K   pA  = g_K_rect * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - e_K )
    function I_L   pA = g_L * ( V_m - e_L )
	function I_CaN pA = g_Ca_N *  Act_mc * Act_mc * Act_hc * (V_m - e_Ca)
	function I_CaL pA = g_Ca_L * Act_p * (V_m - e_Ca)
	function I_CaK pA = 0.6 * g_Ca_K * (Ca_in * Ca_in)/(Ca_in * Ca_in + 0.014 * 0.014)*(V_m - e_K)

    V_m' =( -( I_Na + I_K + I_L + I_CaN + I_CaL + I_CaK ) + currents + I_e + I_syn_inh + I_syn_exc ) / C_m


	Inact_n' = (potassium_n_inf(V_m) - Inact_n) / potassium_n_tau(V_m)
	Act_m' = (sodium_m_inf(V_m) - Act_m) / sodium_m_tau(V_m)
	Act_h' = (sodium_h_inf(V_m) - Act_h) / sodium_h_tau(V_m)
	Act_p' = (calcium_p_inf(V_m) - Act_h) / calcium_p_tau(V_m)
	Act_mc' = (calcium_mc_inf(V_m) - Act_mc) / calcium_mc_tau(V_m)
	Act_hc' = (calcium_hc_inf(V_m) - Act_hc) / calcium_hc_tau(V_m)

	Ca_in'= 0.01 * (-(I_CaN + I_CaN) - 4*Ca_in)

  end

  parameters:
    t_ref ms = 2.0ms         # Refractory period

    g_Na nS = 5000.0nS       # Sodium peak conductance
    g_L nS = 200.0nS         # Leak conductance
    g_K_rect nS = 30000.0nS  # Delayed Rectifier Potassium peak conductance
    g_Ca_N nS = 5000.0nS
    g_Ca_L nS = 10.0nS
    g_Ca_K nS = 30000.0nS

	Ca_out mmol = 2.0mmol    # Outside Calcium concentration
	Ca_in mmol = 0.0001mmol  # Inside Calcium concentration

	C_m pF = 200.0pF         # Membrane capacitance
	e_Na mV = 50.0mV
	e_K mV = -80.0mV
	e_L	mV = -70.0mV

	# Nernst equation constants
	R_const (kg*m**2)/(s**2*K*mol) = 8.314472  # Gas constant
	F_const C/mol = 96485.34                   # Faraday constant
	T_current K = 309.15K                      # 36 Celcius

    tau_syn_ex ms = 0.2ms  # Rise time of the excitatory synaptic alpha function i
    tau_syn_in ms = 2.0ms  # Rise time of the inhibitory synaptic alpha function
    I_e pA = 0pA           # Constant Current in pA
  end

  internals:
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
      spikeInh pA <- inhibitory spike
      spikeExc pA <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate_odes()
    # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
    if r > 0: # is refractory?
      r -= 1
    elif V_m > 0 mV and U_old > V_m: # threshold && maximum
      r = RefractoryCounts
      emit_spike()
    end

  end

  function calcium_mc_inf(V_m mV) real:
	return 1/(1 + exp(-(V_m + 32)/5))
  end

  function calcium_mc_tau() real:
	return 15.0
  end

  function calcium_hc_inf(V_m mV) real:
	return 1/(1 + exp((V_m + 50)/5))
  end

  function calcium_hc_tau() real:
	return 50.0
  end

  function calcium_p_tau() real:
	return 400.0
  end

  function calcium_p_inf(V_m mV) real:
	return 1/(1 + exp(-(V_m + 55.8)/3.7))
  end

  function potassium_n_tau(V_m mV) real:
	return 5 / (exp((V_m + 50)/40) + exp(-(V_m + 50)/50))
  end

  function potassium_n_inf(V_m mV) real:
	return 1 / (1 + exp(-(V_m + 38)/15))
  end

  function sodium_h_tau(V_m mV) real:
	return 30 / (exp((V_m + 60)/15) + exp(-(V_m + 60)/16))
  end

  function sodium_h_inf(V_m mV) real:
	return 1 / (1 + exp((V_m + 65)/7))
  end

  function sodium_m_tau(V_m mV) real:
	return 1 / (sodium_m_alpha(V_m) + sodium_m_beta(V_m))
  end

  function sodium_m_inf(V_m mV) real:
	return sodium_m_alpha(V_m) / (sodium_m_alpha(V_m) + sodium_m_beta(V_m))
  end

  function sodium_m_alpha(V_m mV) real:
	return (0.4*(V_m + 66.0)) / (1 - exp(-(V_m + 66.0)/5.0))
  end

  function sodium_m_beta(V_m mV) real:
	return (0.4*(-(V_m + 32.0))) / (1 - exp((V_m + 32.0)/5.0))
  end

end
